<launch>

  <!-- these are the arguments you can pass this launch file, for example paused:=true -->
  <arg name="kinova_robotType" default="j2n6s300"/>
  <arg name="kinova_robotName" default="$(arg kinova_robotType)"/>
  <arg name="paused" default="true"/>
  <arg name="use_sim_time" default="true"/>
  <arg name="gui" default="true"/>
  <arg name="headless" default="false"/>
  <arg name="debug" default="false"/>
  <arg name="use_trajectory_controller" default="false"/>
  <arg name="is7dof" default="false"/>

  <!-- We resume the logic in empty_world.launch, changing only the name of the world to be launched -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find kinova_gazebo)/worlds/jaco.world"/>
    <arg name="debug" value="$(arg debug)" />
    <arg name="gui" value="$(arg gui)" />
    <arg name="paused" value="$(arg paused)"/>
    <arg name="use_sim_time" value="$(arg use_sim_time)"/>
    <arg name="headless" value="$(arg headless)"/>
  </include>

  <!-- Load the URDF into the ROS Parameter Server -->
  <param name="robot_description" command="$(find xacro)/xacro --inorder '$(find kinova_description)/urdf/$(arg kinova_robotType)_standalone_position.xacro'" />

  <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
  <!-- For the 6DOF -->
  <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen" unless="$(arg is7dof)"
    args="-urdf -model $(arg kinova_robotName) -param robot_description
        -J $(arg kinova_robotType)_joint_1 0.0
        -J $(arg kinova_robotType)_joint_2 2.9
        -J $(arg kinova_robotType)_joint_3 1.3
        -J $(arg kinova_robotType)_joint_4 -2.07
        -J $(arg kinova_robotType)_joint_5 1.4
        -J $(arg kinova_robotType)_joint_6 0.0
        -J $(arg kinova_robotType)_joint_finger_1 1.0
        -J $(arg kinova_robotType)_joint_finger_2 1.0
        -J $(arg kinova_robotType)_joint_finger_3 1.0" />


  <!-- ros_control launch file >
  <include file="$(find kinova_control)/launch/kinova_control_position.launch">
    <arg name="kinova_robotName" value="$(arg kinova_robotName)"/>
    <arg name="kinova_robotType" value="$(arg kinova_robotType)"/>
    <arg name="use_trajectory_controller" value="$(arg use_trajectory_controller)"/>
    <arg name="is7dof" value="$(arg is7dof)"/>
  </include-->
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"
        respawn="false" output="screen">
    <param name="publish_frequency" type="double" value="50.0" />
    <param name="tf_prefix" type="string" value="" />
  </node>
  <!-- Fake Calibration -->
  <node pkg="rostopic" type="rostopic" name="fake_joint_calibration"
        args="pub /calibrated std_msgs/Bool true" />
  <!-- Load joint controller configurations from YAML file to parameter server -->
  <rosparam file="$(find kinova_control)/config/$(arg kinova_robotName)_control_position.yaml" command="load"/>
  <node name="joint_state_controller_spawner" pkg="controller_manager" type="controller_manager" args="spawn joint_state_controller" respawn="false" output="screen"/>

  <!--node name="arm_controller_spawner" pkg="controller_manager" type="controller_manager" args="spawn arm_controller" respawn="false" ns="$(arg kinova_robotName)" output="screen"/-->
          <!-- load the joint by joint position controllersjoint_1_position_controller joint_2_position_controller
               joint_3_position_controller joint_4_position_controller
               joint_5_position_controller joint_6_position_controller  -->
  <node name="arm_controller_spawner" pkg="controller_manager" type="controller_manager" args="spawn arm_controller" respawn="false" output="screen"/>

  <!--node name="$(arg kinova_robotName)_joints_controller" pkg="controller_manager" type="spawner" respawn="false"
        output="screen" ns="$(arg kinova_robotName)"
       args="
               finger_2_position_controller finger_1_position_controller
               finger_3_position_controller finger_tip_1_position_controller
               finger_tip_2_position_controller finger_tip_3_position_controller
               joint_state_controller"/-->

  <node name="ros_control_controller_manager" pkg="controller_manager" type="controller_manager" respawn="false" output="screen"  args="load joint_group_position_controller" />


  <!-- rqt launch file >

  <include file="$(find kinova_control)/launch/kinova_rqt.launch">
    <arg name="kinova_robotType" value="$(arg kinova_robotName)"/>
  </include-->
<!-- create web socket api >
  <node name="file_server" pkg="file_server" type="file_server" output="screen" />
  <param name="robot/name" value="502" />
  <include file="$(find rosbridge_server)/launch/rosbridge_websocket.launch" >
     <arg name="port" value="5901"/>
	<arg name="address" value="127.0.0.1"/>
  </include-->
</launch>

